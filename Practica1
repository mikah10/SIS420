PRACTICA 1 


{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mikah10/SIS420/blob/main/Practica1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9L0KhPHmJVNa"
      },
      "source": [
        "# Ejercicion de programación - Regresión Logistica\n",
        "\n",
        "En este ejercicio se implementa regresion logistica y se aplica a dos diferentes datasets."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z5PQZyiqJhUu",
        "outputId": "661596f8-b579-40ca-f03a-806e1fb5ecdf"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 110,
      "metadata": {
        "id": "Eg6cIE74JVNd"
      },
      "outputs": [],
      "source": [
        "# se utiliza para el manejo de rutas y directorios.\n",
        "import os\n",
        "\n",
        "# Calculo cientifico y vectorial para python\n",
        "import numpy as np\n",
        "\n",
        "# Librerias para graficar\n",
        "from matplotlib import pyplot\n",
        "\n",
        "# Modulo de optimización de scipy\n",
        "from scipy import optimize\n",
        "\n",
        "# le dice a matplotlib que incruste gráficos en el cuaderno\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "t52vBnb_JVNe"
      },
      "source": [
        "## 1 Regresion Logistica\n",
        "\n",
        "En esta parte del ejercicio, creará un modelo de regresión logística para predecir si una persona que solicita un prestamo a un banco será aprobado o no. Suponga que es el agente bancario y desea determinar las probabilidades de las personas que piden un prestamo sean aprobadas o denegadas. Tiene datos históricos de solicitantes anteriores que puede usar como un conjunto de capacitación para la regresión logística. Para cada ejemplo de capacitación, se tienen los datos bancarios, historiales y creditos del solicitante . Ahaora usaremos dichos datos para crear un modelo de clasificasión que calcule la probabilidad de un solicitante a recibir el prestamo o no en funcion a los requisitos.\n",
        "\n",
        "La siguiente celda cargará los datos y las etiquetas correspondientes:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 111,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WVzUelTXJVNe",
        "outputId": "ec707286-dc53-4483-b06f-3f17fba9bf39"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[54.96714153 31.25246425  1.          0.         35.38311153]\n",
            " [48.61735699 31.73224105  0.          0.         25.96955894]\n",
            " [56.47688538 26.59987639  0.          0.         77.55532765]\n",
            " [65.23029856 31.16126849  0.          1.         82.61512653]\n",
            " [47.65846625 31.46536237  1.          0.         99.14546278]\n",
            " [47.65863043 26.42824291  0.          1.         47.13559092]\n",
            " [65.79212816 39.32887256  1.          1.         43.48162772]\n",
            " [57.67434729 32.3691646   0.          0.         79.87716647]\n",
            " [45.30525614 24.04348251  0.          0.         40.67231862]\n",
            " [55.42560044 33.28276804  0.          1.         93.7681593 ]\n",
            " [45.36582307 25.12659165  0.          0.         87.25714767]\n",
            " [45.34270246 33.93542302  1.          0.         48.60946246]\n",
            " [52.41962272 35.7929779   1.          1.         77.5783961 ]\n",
            " [30.86719755 25.89658841  0.          1.         77.90885867]\n",
            " [32.75082167 34.81688065  0.          0.         19.2811482 ]\n",
            " [44.37712471 32.06390463  1.          1.         91.2297616 ]\n",
            " [39.8716888  34.1103008   1.          0.         55.47271352]\n",
            " [53.14247333 39.48396491  1.          0.         84.38117195]\n",
            " [40.91975924 28.77305942  1.          0.         38.80446409]\n",
            " [35.87696299 26.23131918  0.          1.         90.59709056]\n",
            " [64.65648769 25.55242785  1.          0.         45.02815109]\n",
            " [47.742237   25.92094858  0.          0.         10.97538863]\n",
            " [50.67528205 29.61449145  1.          0.         91.48437788]\n",
            " [35.75251814 31.70575987  1.          1.         18.21580091]\n",
            " [44.55617275 31.383454    1.          1.         38.73822738]\n",
            " [51.1092259  34.13591625  1.          1.         95.50557703]\n",
            " [38.49006423 30.06500946  1.          1.         95.55464322]\n",
            " [53.75698018 37.26767039  0.          1.         61.60940993]\n",
            " [43.9936131  28.67671583  0.          0.         66.8653491 ]\n",
            " [47.0830625  43.60084583  1.          1.         50.36009698]\n",
            " [43.98293388 33.12833674  1.          1.         36.38896945]\n",
            " [68.52278185 25.71421222  0.          1.         39.57980908]\n",
            " [49.86502775 24.64553751  1.          0.         70.52666105]\n",
            " [39.42289071 32.41236208  1.          1.         77.71370765]\n",
            " [58.22544912 28.88268607  0.          1.         81.24211394]\n",
            " [37.7915635  33.57000247  1.          0.         81.06563285]\n",
            " [52.08863595 32.36618812  1.          1.         18.20854927]\n",
            " [30.40329876 29.63585544  0.          0.         54.49782742]\n",
            " [36.71813951 25.76603141  0.          0.         15.1802884 ]\n",
            " [51.96861236 22.42576388  0.          0.         59.45759941]\n",
            " [57.3846658  27.76742524  1.          0.         49.73774512]\n",
            " [51.71368281 34.28199397  0.          0.         89.89337645]\n",
            " [48.84351718 31.07046872  0.          1.         41.58235113]\n",
            " [46.98896304 23.77130611  0.          0.         20.53603148]\n",
            " [35.2147801  30.86590463  0.          0.         22.86925138]\n",
            " [42.80155792 31.9265869   0.          1.         78.53595685]\n",
            " [45.39361229 25.58071282  0.          0.         65.6396257 ]\n",
            " [60.57122226 30.76862553  1.          1.         19.10104085]\n",
            " [53.4361829  30.29104359  1.          1.         17.56961255]\n",
            " [32.36959845 24.28514851  0.          1.         73.08722183]\n",
            " [53.24083969 31.7889368   0.          0.         16.54867057]\n",
            " [46.1491772  32.80392263  0.          0.         83.96740534]\n",
            " [43.23078    35.41525622  1.          0.         73.56180044]\n",
            " [56.11676289 35.26901026  1.          1.         17.32139026]\n",
            " [60.30999522 23.11165316  1.          0.         17.63539427]\n",
            " [59.31280119 25.3108748   1.          0.         98.79756207]\n",
            " [41.60782477 32.57517634  1.          0.         43.68437162]\n",
            " [46.90787624 32.56892975  1.          1.         43.35779324]\n",
            " [53.31263431 32.57523843  1.          1.         83.15196105]\n",
            " [59.75545127 49.26365745  1.          0.         95.25237196]\n",
            " [45.20825762 32.85445255  1.          0.         98.74009574]\n",
            " [48.14341023 35.6778282   0.          0.         77.80403667]\n",
            " [38.93665026 34.77000882  0.          0.         43.8633627 ]\n",
            " [38.03793376 33.25695626  0.          1.         17.5150645 ]\n",
            " [58.12525822 28.42365378  0.          1.         79.94322243]\n",
            " [63.56240029 33.7948461   1.          1.         60.25638248]\n",
            " [49.27989878 26.13587393  1.          1.         48.17998083]\n",
            " [60.03532898 28.81590697  0.          0.         91.57189466]\n",
            " [53.61636025 27.57318226  1.          0.         20.00777341]\n",
            " [43.54880245 30.4093707   0.          0.         54.33625939]\n",
            " [53.61395606 41.57329283  1.          1.         11.02182803]\n",
            " [65.38036566 20.66367404  0.          0.         52.17945778]\n",
            " [49.64173961 33.43130095  1.          1.         15.06729481]\n",
            " [65.64643656 21.93642064  1.          1.         20.69361246]\n",
            " [23.80254896 27.64034067  0.          0.         20.57736221]\n",
            " [58.21902504 35.44475298  1.          0.         68.42892719]\n",
            " [50.87047068 30.3214001   0.          0.         77.14403913]\n",
            " [47.0099265  24.61127611  0.          1.         62.50318886]\n",
            " [50.91760777 26.42348145  0.          0.         96.59552936]\n",
            " [30.12431085 33.39798874  0.          1.         43.73835216]\n",
            " [47.80328112 26.34816684  1.          0.         35.71408777]\n",
            " [53.57112572 31.08229295  1.          1.         88.17392154]\n",
            " [64.77894045 30.2278592   1.          1.         30.12362547]\n",
            " [44.81729782 26.74199826  0.          0.         96.69002855]\n",
            " [41.91506397 40.71972045  1.          1.         11.09390272]\n",
            " [44.98242956 33.16959511  0.          1.         97.2890944 ]\n",
            " [59.15402118 19.87428707  1.          0.         13.88439208]\n",
            " [53.2875111  30.93227157  1.          1.         90.20288023]\n",
            " [44.70239796 26.69106768  1.          0.         57.49309982]\n",
            " [55.13267433 34.26216667  0.          1.         99.36683165]\n",
            " [50.97077549 26.03739631  1.          0.         16.64169083]\n",
            " [59.68644991 29.42631779  1.          0.         59.8468856 ]\n",
            " [42.97946906 32.52493639  0.          1.         97.23722821]\n",
            " [46.72337853 34.32877597  1.          1.         57.07880598]\n",
            " [46.07891847 23.99851796  0.          1.         66.64587743]\n",
            " [35.36485052 28.32749382  1.          1.         72.61738201]\n",
            " [52.96120277 27.62527344  0.          1.         50.90869583]\n",
            " [52.61055272 26.73335384  0.          0.         66.48022721]\n",
            " [50.05113457 38.8272712   1.          1.         62.58828807]\n",
            " [47.65412867 32.02490855  0.          0.         91.10422094]\n",
            " [35.84629258 23.69558023  0.          0.         14.09017423]\n",
            " [45.79354677 34.58930974  0.          1.         35.28668706]\n",
            " [46.57285483 40.61078099  0.          0.         95.53703357]\n",
            " [41.97722731 35.1623263   0.          0.         90.12374055]\n",
            " [48.38714288 22.40315017  0.          0.         51.00910775]\n",
            " [54.04050857 27.57882964  1.          0.         65.8119338 ]\n",
            " [68.86185901 36.33455575  0.          1.         34.96430647]\n",
            " [51.74577813 26.46165267  0.          0.         26.93090438]\n",
            " [52.57550391 32.21909714  1.          1.         51.73285644]\n",
            " [49.25554084 33.87317027  1.          1.         41.80170052]\n",
            " [30.81228785 25.36534764  1.          0.         62.52905007]\n",
            " [49.73486125 29.70237322  1.          1.         16.99611733]\n",
            " [50.6023021  13.7936633   1.          1.         97.69553269]\n",
            " [74.63242112 24.87806179  1.          1.         98.758967  ]\n",
            " [48.07639035 28.73715924  1.          0.         72.83455426]\n",
            " [53.01547342 23.76108409  0.          1.         58.24867297]\n",
            " [49.6528823  38.16205652  0.          1.         37.85748547]\n",
            " [38.31321962 22.84929311  1.          1.         83.24155177]\n",
            " [61.42822815 27.79977757  0.          0.         71.62580553]\n",
            " [57.51933033 30.65370289  0.          1.         24.63552454]\n",
            " [57.91031947 37.20636645  0.          0.         91.9834466 ]\n",
            " [40.90612545 22.82068924  1.          0.         84.02835186]\n",
            " [64.02794311 35.81581876  1.          0.         95.4819922 ]\n",
            " [35.98148937 30.05116531  0.          0.         75.31475575]\n",
            " [55.86857094 25.09245674  1.          0.         65.20736763]\n",
            " [71.90455626 32.31051737  0.          0.         47.64187327]\n",
            " [40.09463675 30.99529848  0.          1.         93.9455635 ]\n",
            " [44.3370227  26.99891561  0.          0.         87.94575006]\n",
            " [50.99651365 30.34901042  0.          1.         14.06968031]\n",
            " [44.96524346 28.07343202  1.          1.         12.3730277 ]\n",
            " [34.49336569 30.56758673  1.          0.         43.88170302]\n",
            " [50.68562975 33.31065337  1.          1.         82.94979977]\n",
            " [39.37696286 37.93008408  0.          1.         98.85485164]\n",
            " [54.73592431 23.81092251  1.          1.         23.5375202 ]\n",
            " [40.80575766 40.66516687  0.          1.         63.47176438]\n",
            " [65.49934405 20.239561    1.          0.         44.2801771 ]\n",
            " [42.16746708 29.24107452  0.          1.         97.2922958 ]\n",
            " [46.77938484 32.94158603  0.          0.         85.79070308]\n",
            " [58.13517217 31.40495934  0.          1.         85.44958342]\n",
            " [37.69135684 26.8865024   1.          1.         52.18238438]\n",
            " [52.27459935 28.95938875  1.          0.         47.33375521]\n",
            " [63.07142754 27.53499533  1.          1.         34.60663647]\n",
            " [33.92516765 27.05317622  1.          1.         15.0737947 ]\n",
            " [51.84633859 34.24801049  0.          1.         87.82501386]\n",
            " [52.59882794 31.78507743  1.          0.         83.16109082]\n",
            " [57.81822872 26.53545202  1.          1.         99.9745906 ]\n",
            " [37.63049289 34.49799938  0.          0.         99.69731534]\n",
            " [36.79543387 31.5364976   0.          1.         59.9888535 ]\n",
            " [55.21941566 34.06431059  0.          0.         79.20886737]\n",
            " [52.96984673 33.14814421  1.          0.         95.02891569]]\n",
            "[1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n",
            " 1. 1. 1. 1. 1. 1.]\n"
          ]
        }
      ],
      "source": [
        "# Cargar datos\n",
        "# Las dos primeras columnas contienen la nota de dos examenes y la tercera columna\n",
        "# contiene la etiqueta que indica si el alumno ingreso o no a la universidad.\n",
        "data = np.loadtxt('/content/drive/MyDrive/SIS420/loan_approval_dataset.csv', delimiter=',', skiprows=1)\n",
        "X, y = data[:, 0:5], data[:, 5]\n",
        "print(X)\n",
        "print(y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5wAs5p25JVNf"
      },
      "source": [
        "### 1.1 Visualizar los datos\n",
        "\n",
        "Antes de comenzar a implementar cualquier algoritmo de aprendizaje, siempre es bueno visualizar los datos si es posible. Mostramos los datos en una gráfica bidimensional llamando a la función `plotData`. Se completará el código en `plotData` para que muestre una figura donde los ejes son los dos puntajes de los dos examenes, los ejemplos positivos y negativos se muestran con diferentes marcadores."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 112,
      "metadata": {
        "id": "PU2IfSLdJVNf"
      },
      "outputs": [],
      "source": [
        "def plotData(X, y):\n",
        "    # Gragica los puntos de datos X y y en una nueva figura. Grafica los puntos de datos con * para los positivos y\n",
        "    # o para los negativos.\n",
        "\n",
        "    # Crea una nueva figura\n",
        "    fig = pyplot.figure()\n",
        "\n",
        "    # Find Indices of Positive and Negative Examples\n",
        "    pos = y == 1\n",
        "    neg = y == 0\n",
        "\n",
        "    # Plot Examples\n",
        "    pyplot.plot(X[pos, 0], X[pos, 1], 'k*', lw=2, ms=10)\n",
        "    pyplot.plot(X[neg, 0], X[neg, 1], 'ko', mfc='y', ms=8, mec='k', mew=1)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "llREAw-3JVNg"
      },
      "source": [
        "Se llama a la función implementada para mostrar los datos cargados:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 113,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "8ynW5qI3JVNg",
        "outputId": "e37321e9-a8fe-4ddd-e61d-79a33cf161d7"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plotData(X, y)\n",
        "# adiciona etiquetas para los ejes\n",
        "pyplot.xlabel('Calificación Examen 1')\n",
        "pyplot.ylabel('Calificación Examen 2')\n",
        "pyplot.legend(['Admitido', 'No admitido'])\n",
        "pass"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Pfpf9aEFJVNg"
      },
      "source": [
        "<a id=\"section1\"></a>\n",
        "### 1.2 Implementacion\n",
        "\n",
        "#### 1.2.1 Fución Sigmoidea\n",
        "\n",
        "La hipotesis para la regresión logistica se define como:\n",
        "\n",
        "$$ h_\\theta(x) = g(\\theta^T x)$$\n",
        "\n",
        "donde la función $g$ is la función sigmoidea. La función sigmoidea se define como:\n",
        "\n",
        "$$g(z) = \\frac{1}{1+e^{-z}}$$.\n",
        "\n",
        "Los resultados que debe generar la funcion sigmoidea para valores positivos amplios de `x`, deben ser cercanos a 1, mientras que para valores negativos grandes, la sigmoide debe generar valores cercanos 0. La evaluacion de `sigmoid(0)` debe dar un resultado exacto de 0.5. Esta funcion tambien debe poder trabajar con vectores y matrices."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 114,
      "metadata": {
        "id": "pk9dV23xJVNh"
      },
      "outputs": [],
      "source": [
        "def sigmoid(z):\n",
        "    # Calcula la sigmoide de una entrada z\n",
        "    # convierte la intrada a un arreglo numpy\n",
        "    z = np.array(z)\n",
        "\n",
        "    g = np.zeros(z.shape)\n",
        "\n",
        "    g = 1 / (1 + np.exp(-z))\n",
        "\n",
        "    return g"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uRsBEhsWJVNh"
      },
      "source": [
        "Se calcula el valor de la sigmoide aplicando la funcion sigmoid con `z=0`, se debe obtener un resultado de 0.5. RE recomienda experimentar con otros valores de `z`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 115,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uIPk61NLJVNh",
        "outputId": "df68a8c9-f0f5-413f-ee73-a08f92d45f46"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "g( [0, 0.5, 1] ) =  [0.5        0.62245933 0.73105858]\n"
          ]
        }
      ],
      "source": [
        "# Prueba la implementacion de la funcion sigmoid\n",
        "z = [0, 0.5, 1]\n",
        "g = sigmoid(z)\n",
        "\n",
        "print('g(', z, ') = ', g)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tDl3_8hvJVNi"
      },
      "source": [
        "<a id=\"section2\"></a>\n",
        "#### 1.2.2 Función de Costo y Gradiente\n",
        "\n",
        "Se implementa la funcion cost y gradient, para la regresión logistica. Antes de continuar es importante agregar el termino de intercepcion a X."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 116,
      "metadata": {
        "id": "ELtMkiYDJVNi"
      },
      "outputs": [],
      "source": [
        "# Configurar la matriz adecuadamente, y agregar una columna de unos que corresponde al termino de intercepción.\n",
        "m, n = X.shape\n",
        "# Agraga el termino de intercepción a A\n",
        "X = np.concatenate([np.ones((m, 1)), X], axis=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dREHB51mJVNi"
      },
      "source": [
        "La funcion de costo en una regresión logistica es:\n",
        "\n",
        "$$ J(\\theta) = \\frac{1}{m} \\sum_{i=1}^{m} \\left[ -y^{(i)} \\log\\left(h_\\theta\\left( x^{(i)} \\right) \\right) - \\left( 1 - y^{(i)}\\right) \\log \\left( 1 - h_\\theta\\left( x^{(i)} \\right) \\right) \\right]$$\n",
        "\n",
        "y el gradiente del costo es un vector de la misma longitud como $\\theta$ donde el elemento $j^{th}$ (para $j = 0, 1, \\cdots , n$) se define como:\n",
        "\n",
        "$$ \\frac{\\partial J(\\theta)}{\\partial \\theta_j} = \\frac{1}{m} \\sum_{i=1}^m \\left( h_\\theta \\left( x^{(i)} \\right) - y^{(i)} \\right) x_j^{(i)} $$\n",
        "\n",
        "Si bien este gradiente parece idéntico al gradiente de regresión lineal, la fórmula es diferente porque la regresión lineal y logística tienen diferentes definiciones de $h_\\theta(x)$.\n",
        "<a id=\"costFunction\"></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 121,
      "metadata": {
        "id": "iqDZRIgjJVNi"
      },
      "outputs": [],
      "source": [
        "def calcularCosto(theta, X, y):\n",
        "    # Inicializar algunos valores utiles\n",
        "    m = y.size  # numero de ejemplos de entrenamiento\n",
        "\n",
        "    J = 0\n",
        "    h = sigmoid(X.dot(theta.T))\n",
        "    J = (1 / m) * np.sum(-y.dot(np.log(h)) - (1 - y).dot(np.log(1 - h)))\n",
        "\n",
        "    return J"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 122,
      "metadata": {
        "id": "7G4SjTrwJVNi"
      },
      "outputs": [],
      "source": [
        "def descensoGradiente(theta, X, y, alpha, num_iters):\n",
        "    # Inicializa algunos valores\n",
        "    m = y.shape[0] # numero de ejemplos de entrenamiento\n",
        "\n",
        "    # realiza una copia de theta, el cual será acutalizada por el descenso por el gradiente\n",
        "    theta = theta.copy()\n",
        "    J_history = []\n",
        "\n",
        "    for i in range(num_iters):\n",
        "        h = sigmoid(X.dot(theta.T))\n",
        "        theta = theta - (alpha / m) * (h - y).dot(X)\n",
        "\n",
        "        J_history.append(calcularCosto(theta, X, y))\n",
        "    return theta, J_history"
      ]
    },
    {
      "source": [
        "def descensoGradiente(theta, X, y, alpha, num_iters):\n",
        "    # Inicializa algunos valores\n",
        "    m = y.shape[0] # numero de ejemplos de entrenamiento\n",
        "\n",
        "    # realiza una copia de theta, el cual será acutalizada por el descenso por el gradiente\n",
        "    theta = theta.copy()\n",
        "    J_history = []\n",
        "\n",
        "    for i in range(num_iters):\n",
        "        # Calculate the hypothesis\n",
        "        h = sigmoid(X.dot(theta)) # Removed .T from theta\n",
        "\n",
        "        # Update theta\n",
        "        theta = theta - (alpha / m) * (h - y).dot(X)\n",
        "\n",
        "        # Append the cost to the history\n",
        "        J_history.append(calcularCosto(theta, X, y))\n",
        "    return theta, J_history"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "1htxMC1nxG1V"
      },
      "execution_count": 129,
      "outputs": []
    },
    {
      "source": [
        "def descensoGradiente(theta, X, y, alpha, num_iters):\n",
        "    # Inicializa algunos valores\n",
        "    m = y.shape[0] # numero de ejemplos de entrenamiento\n",
        "\n",
        "    # realiza una copia de theta, el cual será acutalizada por el descenso por el gradiente\n",
        "    theta = theta.copy()\n",
        "    J_history = []\n",
        "\n",
        "    for i in range(num_iters):\n",
        "        # Calculate the hypothesis\n",
        "        h = sigmoid(X.dot(theta))  # Removed .T from theta\n",
        "\n",
        "        # Update theta\n",
        "        theta = theta - (alpha / m) * (h - y).dot(X)\n",
        "\n",
        "        # Append the cost to the history\n",
        "        J_history.append(calcularCosto(theta, X, y))\n",
        "    return theta, J_history"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "mbbMQoV12Fuj"
      },
      "execution_count": 130,
      "outputs": []
    },
    {
      "source": [
        "# Elegir algun valor para alpha (probar varias alternativas)\n",
        "alpha = 0.001\n",
        "num_iters = 1000\n",
        "\n",
        "# inicializa theta y ejecuta el descenso por el gradiente\n",
        "#The error was here in the size of theta\n",
        "theta = np.zeros(X.shape[1]) # Updated the size of theta to match the number of features in X\n",
        "theta, J_history = descensoGradiente(theta, X, y, alpha, num_iters)\n",
        "\n",
        "# Grafica la convergencia del costo\n",
        "pyplot.plot(np.arange(len(J_history)), J_history, lw=2)\n",
        "pyplot.xlabel('Numero de iteraciones')\n",
        "pyplot.ylabel('Costo J')\n",
        "\n",
        "# Muestra los resultados del descenso por el gradiente\n",
        "print('theta calculado por el descenso por el gradiente: {:s}'.format(str(theta)))\n",
        "\n",
        "\n",
        "# The error was here in the size of X_array\n",
        "X_array = [1, 80, 46, 20, 30, 40] # Updated X_array to match the required input shape.\n",
        "aprueba = sigmoid(np.dot(X_array, theta))   # Se debe cambiar esto\n",
        "\n"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "X9Zlz5gg2I85",
        "outputId": "5880d514-45fa-4ba1-d7fa-9d57bf4b14ab"
      },
      "execution_count": 143,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "theta calculado por el descenso por el gradiente: [0.0019272  0.08612778 0.05684505 0.00093677 0.00090154 0.06923854]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 132,
      "metadata": {
        "id": "C2Qew-sRJVNj"
      },
      "outputs": [],
      "source": [
        "def costFunction(theta, X, y):\n",
        "    # Inicializar algunos valores utiles\n",
        "    m = y.size  # numero de ejemplos de entrenamiento\n",
        "\n",
        "    J = 0\n",
        "    grad = np.zeros(theta.shape)\n",
        "\n",
        "    h = sigmoid(X.dot(theta.T))\n",
        "\n",
        "    J = (1 / m) * np.sum(-y.dot(np.log(h)) - (1 - y).dot(np.log(1 - h)))\n",
        "    grad = (1 / m) * (h - y).dot(X)\n",
        "\n",
        "    return J, grad"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1ioLXhR5JVNj"
      },
      "source": [
        "Se prueba la funcion `costFunction` utilizando dos casos de prueba para $\\theta$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 133,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j7Fe_xEZJVNj",
        "outputId": "5c093ea5-9f2a-4401-f9f6-31d96ae41aaf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0. 0. 0. 0. 0. 0.]\n",
            "Costo en theta inicial (zeros): 0.693\n",
            "Costo esperado (aproximado): 0.693\n",
            "\n",
            "[ -0.5        -24.58836566 -15.17807437  -0.25333333  -0.24666667\n",
            " -29.85798248]\n",
            "Gradiente en theta inicial (zeros):\n",
            "\t[-0.5000, -24.5884, -15.1781]\n",
            "Gradiente esperado (aproximado):\n",
            "\t[-0.1000, -12.0092, -11.2628]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Inicializacion de parametros de ajuste\n",
        "initial_theta = np.zeros(n+1)\n",
        "print(initial_theta)\n",
        "cost, grad = costFunction(initial_theta, X, y)\n",
        "\n",
        "print('Costo en theta inicial (zeros): {:.3f}'.format(cost))\n",
        "print('Costo esperado (aproximado): 0.693\\n')\n",
        "print(grad)\n",
        "print('Gradiente en theta inicial (zeros):')\n",
        "print('\\t[{:.4f}, {:.4f}, {:.4f}]'.format(*grad))\n",
        "print('Gradiente esperado (aproximado):\\n\\t[-0.1000, -12.0092, -11.2628]\\n')\n",
        "\n"
      ]
    },
    {
      "source": [
        "def costFunction(theta, X, y):\n",
        "    # Inicializar algunos valores utiles\n",
        "    m = y.size  # numero de ejemplos de entrenamiento\n",
        "\n",
        "    J = 0\n",
        "    grad = np.zeros(theta.shape)\n",
        "\n",
        "    # The error was in this line. It should be X.dot(theta) instead of X.dot(theta.T)\n",
        "    h = sigmoid(X.dot(theta))  # Changed from theta.T to theta\n",
        "\n",
        "    J = (1 / m) * np.sum(-y.dot(np.log(h)) - (1 - y).dot(np.log(1 - h)))\n",
        "    grad = (1 / m) * (h - y).dot(X)\n",
        "\n",
        "    return J, grad"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "MKFGtTzixPyl"
      },
      "execution_count": 134,
      "outputs": []
    },
    {
      "source": [
        "def costFunction(theta, X, y):\n",
        "    # Inicializar algunos valores utiles\n",
        "    m = y.size  # numero de ejemplos de entrenamiento\n",
        "\n",
        "    J = 0\n",
        "    grad = np.zeros(theta.shape)\n",
        "\n",
        "    # The error was in this line. It should be X.dot(theta) instead of X.dot(theta.T)\n",
        "    h = sigmoid(X.dot(theta))  # Changed from theta.T to theta\n",
        "\n",
        "    J = (1 / m) * np.sum(-y.dot(np.log(h)) - (1 - y).dot(np.log(1 - h)))\n",
        "    grad = (1 / m) * (h - y).dot(X)\n",
        "\n",
        "    return J, grad"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "MlLWBYtGOWig"
      },
      "execution_count": 135,
      "outputs": []
    },
    {
      "source": [
        "def costFunction(theta, X, y):\n",
        "    # Inicializar algunos valores utiles\n",
        "    m = y.size  # numero de ejemplos de entrenamiento\n",
        "\n",
        "    J = 0\n",
        "    grad = np.zeros(theta.shape)\n",
        "\n",
        "    # The error was in this line. It should be X.dot(theta) instead of X.dot(theta.T)\n",
        "    h = sigmoid(X.dot(theta))  # Changed from theta.T to theta\n",
        "\n",
        "    J = (1 / m) * np.sum(-y.dot(np.log(h)) - (1 - y).dot(np.log(1 - h)))\n",
        "    grad = (1 / m) * (h - y).dot(X)\n",
        "\n",
        "    return J, grad"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "orDKpFXOOLX2"
      },
      "execution_count": 136,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7AeXffwpJVNj"
      },
      "source": [
        "#### 1.2.3 Parámetros de aprendizaje usando `scipy.optimize`\n",
        "\n",
        "En el codigo anterior se encontró los parámetros óptimos de un modelo de regresión lineal al implementar el descenso de gradiente. Se implemento una función de costo y se calculó su gradiente, utilizando el algoritmo del descenso por el gradiente.\n",
        "\n",
        "En lugar de realizar los pasos del descenso por el gradiente, se utilizará el [módulo `scipy.optimize`] (https://docs.scipy.org/doc/scipy/reference/optimize.html). SciPy es una biblioteca de computación numérica para `python`. Proporciona un módulo de optimización para la búsqueda y minimización de raíces. A partir de `scipy 1.0`, la función` scipy.optimize.minimize` es el método a utilizar para problemas de optimización (tanto restringidos como no restringidos).\n",
        "\n",
        "For logistic regression, you want to optimize the cost function $J(\\theta)$ with parameters $\\theta$.\n",
        "Concretely, you are going to use `optimize.minimize` to find the best parameters $\\theta$ for the logistic regression cost function, given a fixed dataset (of X and y values). You will pass to `optimize.minimize` the following inputs:\n",
        "\n",
        "Para la regresión logística, se desea optimizar la función de costo $J(\\theta)$ con los parámetros $\\theta$.\n",
        "Concretamente, se va a utilizar `optimize.minimize` para encontrar los mejores parámetros $\\theta$ para la función de costo de regresión logística, dado un dataset fijo (de valores X e y). Se pasara a `optimize.minimize` las siguientes entradas:\n",
        "\n",
        "- `costFunction`: Una función de costo que, cuando se le da el dataset de entrenamiento y un $\\theta$ particular, calcula el costo de regresión logística y el gradiente con respecto a $\\theta$ para el dataset(X, y). Es importante tener en cuenta que solo se pasa el nombre de la función sin el paréntesis. Esto indica que solo proporcionamos una referencia a esta función y no evaluamos el resultado de esta función.\n",
        "- `initial_theta`: Los valores iniciales de los parametros que se tratan de optimizar.\n",
        "- `(X, y)`: Estos son argumentos adicionales a la funcion de costo.\n",
        "- `jac`: Indicación si la función de costo devuelve el jacobiano (gradiente) junto con el valor de costo. (True)\n",
        "- `method`: Método / algoritmo de optimización a utilizar\n",
        "- `options`: Opciones adicionales que pueden ser específicas del método de optimización específico. Solo se indica al algoritmo el número máximo de iteraciones antes de que termine.\n",
        "\n",
        "Si se ha completado la `costFunction` correctamente,`optimize.minimize` convergerá en los parámetros de optimización correctos y devolverá los valores finales del costo y $\\theta$ en un objeto de clase.\n",
        "\n",
        "Al usar `optimize.minimize`, no se tuvo que escribir ningún bucle ni establecer una tasa de aprendizaje como se hizo para el descenso de gradientes. Todo esto se hace mediante `optimize.minimize`: solo se necesita proporcionar una función que calcule el costo y el gradiente.\n",
        "\n",
        "A continuación, se tiene el código para llamar a `optimize.minimize` con los argumentos correctos."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 137,
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sB2xAu03JVNj",
        "outputId": "d3772a8b-74ec-4af3-8c73-cc0c62945756"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Costo con un valor de theta encontrado por optimize.minimize: 0.000\n",
            "Costo esperado (aproximado): 0.203\n",
            "\n",
            "theta:\n",
            "\t[0.041, 0.256, 0.323]\n",
            "Theta esperado (aproximado):\n",
            "\t[-25.161, 0.206, 0.201]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-137-0dfcfa2e2ef1>:7: OptimizeWarning: Unknown solver options: maxiter\n",
            "  res = optimize.minimize(costFunction,\n"
          ]
        }
      ],
      "source": [
        "# Establecer las opciones para optimize.minimize\n",
        "options= {'maxiter': 1000}\n",
        "\n",
        "# revisar la documentacion de scipy's optimize.minimize para mayor descripcion de los parametros\n",
        "# La funcion devuekve un objeto `OptimizeResult`\n",
        "# Se utiliza el algoritmo de Newton truncado para la optimización.\n",
        "res = optimize.minimize(costFunction,\n",
        "                        initial_theta,\n",
        "                        (X, y),\n",
        "                        jac=True,\n",
        "                        method='TNC',\n",
        "                        options=options)\n",
        "\n",
        "# la propiedad fun del objeto devuelto por `OptimizeResult`\n",
        "# contiene el valor del costFunction de un theta optimizado\n",
        "cost = res.fun\n",
        "\n",
        "# Theta optimizada esta en la propiedad x\n",
        "theta = res.x\n",
        "\n",
        "# Imprimir theta en la pantalla\n",
        "print('Costo con un valor de theta encontrado por optimize.minimize: {:.3f}'.format(cost))\n",
        "print('Costo esperado (aproximado): 0.203\\n');\n",
        "\n",
        "print('theta:')\n",
        "print('\\t[{:.3f}, {:.3f}, {:.3f}]'.format(*theta))\n",
        "print('Theta esperado (aproximado):\\n\\t[-25.161, 0.206, 0.201]')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1DlPL874JVNk"
      },
      "source": [
        "Una vez que se completa `optimize.minimize`, se usa el valor final de $\\theta$ para visualizar el límite de decisión en los datos de entrenamiento.\n",
        "\n",
        "Para hacerlo, se implementa la función `plotDecisionBoundary` para trazar el límite de decisión sobre los datos de entrenamiento."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 138,
      "metadata": {
        "id": "_mDWAzqxJVNk"
      },
      "outputs": [],
      "source": [
        "def plotDecisionBoundary(plotData, theta, X, y):\n",
        "    \"\"\"\n",
        "    Grafica los puntos X y Y en una nueva figura con un limite de desicion definido por theta.\n",
        "    the data points X and y into a new figure with the decision boundary defined by theta.\n",
        "    Grafica los puntos con * para los ejemplos positivos y con o para los ejemplos negativos.\n",
        "\n",
        "    Parametros:\n",
        "    ----------\n",
        "    plotData : func\n",
        "        A function reference for plotting the X, y data.\n",
        "\n",
        "    theta : array_like\n",
        "        Parametros para la regresion logistica. Un vecto de la forma (n+1, ).\n",
        "\n",
        "    X : array_like\n",
        "        Data set de entrada. Se supone que X es una de las siguientes:\n",
        "            1) Matriz Mx3, donde la primera columna es una columna de unos para intercepción.\n",
        "            2) Matriz MxN, N> 3, donde la primera columna son todos unos.\n",
        "\n",
        "    y : array_like\n",
        "        Vector de datos de etiquetas de la forma (m, ).\n",
        "    \"\"\"\n",
        "    # hacer que theta sera un arreglo numpy\n",
        "    theta = np.array(theta)\n",
        "\n",
        "    # Graficar los datos (recordar que la primera columna en X es la intercepción)\n",
        "    plotData(X[:, 1:3], y)\n",
        "\n",
        "    if X.shape[1] <= 3:\n",
        "        # Solo se requieren 2 puntos para definir una linea, para lo cual se eligen dos puntos finales\n",
        "        plot_x = np.array([np.min(X[:, 1]) - 2, np.max(X[:, 1]) + 2])\n",
        "\n",
        "        # Calcular la línea límite de decisión\n",
        "        plot_y = (-1. / theta[2]) * (theta[1] * plot_x + theta[0])\n",
        "\n",
        "        print(plot_x)\n",
        "        print(plot_y)\n",
        "        # Graficar y ajustar los ejes para una mejor visualización\n",
        "        pyplot.plot(plot_x, plot_y)\n",
        "\n",
        "        # Leyenda, especifica para el ejercicio\n",
        "        pyplot.legend(['Aceptado', 'No Aceptado', 'Limite de decisión'])\n",
        "        pyplot.xlim([30, 100])\n",
        "        pyplot.ylim([30, 100])\n",
        "    else:\n",
        "        # Rango de la grilla\n",
        "        u = np.linspace(-1, 1.5, 50)\n",
        "        v = np.linspace(-1, 1.5, 50)\n",
        "\n",
        "        z = np.zeros((u.size, v.size))\n",
        "        # Evalua z = theta*x sobre la grilla\n",
        "        for i, ui in enumerate(u):\n",
        "            for j, vj in enumerate(v):\n",
        "                z[i, j] = np.dot(mapFeature(ui, vj), theta)\n",
        "\n",
        "        z = z.T  # importante transponer z antes de llamar al contorno\n",
        "        # print(z)\n",
        "\n",
        "        # Plot z = 0\n",
        "        pyplot.contour(u, v, z, levels=[0], linewidths=2, colors='g')\n",
        "        pyplot.contourf(u, v, z, levels=[np.min(z), 0, np.max(z)], cmap='Greens', alpha=0.4)\n"
      ]
    },
    {
      "source": [
        "import numpy as np\n",
        "\n",
        "# ... other function definitions ...\n",
        "\n",
        "def plotDecisionBoundary(plotData, theta, X, y):\n",
        "    \"\"\"\n",
        "    Plots the data points X and y into a new figure with the decision boundary defined by theta.\n",
        "    Plots the data points with * for the positive examples and o for the negative examples.\n",
        "\n",
        "    Parameters\n",
        "    ----------\n",
        "    plotData : func\n",
        "        A function reference for plotting the X, y data.\n",
        "\n",
        "    theta : array_like\n",
        "        Parameters for logistic regression. A vector of shape (n+1, ).\n",
        "\n",
        "    X : array_like\n",
        "        Input dataset. Assumed to be either:\n",
        "            1) Mx3 matrix, where the first column is an all-ones column for the intercept.\n",
        "            2) MxN, N>3 matrix, where the first column is all-ones.\n",
        "\n",
        "    y : array_like\n",
        "        Vector of data labels of shape (m, ).\n",
        "    \"\"\"\n",
        "    # make sure theta is a numpy array\n",
        "    theta = np.array(theta)\n",
        "\n",
        "    # Plot the data (remember first column in X is the intercept)\n",
        "    plotData(X[:, 1:3], y)\n",
        "\n",
        "    if X.shape[1] <= 3:\n",
        "        # Only need 2 points to define a line, so choose two endpoints\n",
        "        plot_x = np.array([np.min(X[:, 1]) - 2, np.max(X[:, 1]) + 2])\n",
        "\n",
        "        # Calculate the decision boundary line\n",
        "        plot_y = (-1. / theta[2]) * (theta[1] * plot_x + theta[0])\n",
        "\n",
        "        # Plot, and adjust axes for better viewing\n",
        "        pyplot.plot(plot_x, plot_y)\n",
        "\n",
        "        # Legend, specific for the exercise\n",
        "        pyplot.legend(['Admitted', 'Not admitted', 'Decision Boundary'])\n",
        "        pyplot.xlim([30, 100])\n",
        "        pyplot.ylim([30, 100])\n",
        "    else:\n",
        "        # Here is the fix: We need to ensure that theta has the correct dimensions for the dot product.\n",
        "        # Since your X has 6 features (including the intercept), theta should also have 6 elements.\n",
        "\n",
        "        # Define the grid range\n",
        "        u = np.linspace(-1, 1.5, 50)\n",
        "        v = np.linspace(-1, 1.5, 50)\n",
        "\n",
        "        z = np.zeros((u.size, v.size))\n",
        "        # Evaluate z = theta*x over the grid\n",
        "        for i, ui in enumerate(u):\n",
        "            for j, vj in enumerate(v):\n",
        "                # Instead of using mapFeature which adds polynomial features,\n",
        "                # we construct a feature vector with the original features (1, ui, vj) and an intercept term\n",
        "                feature_vector = np.array([1, ui, vj])\n",
        "\n",
        "                # Pad the feature vector with zeros to match the expected size of theta (6,)\n",
        "                # to match the dimensions of theta, you must pad the feature_vector with zeros (3,)\n",
        "                feature_vector_padded = np.pad(feature_vector, (0, 3), 'constant', constant_values=0)\n",
        "\n",
        "                z[i, j] = np.dot(feature_vector_padded, theta)\n",
        "\n",
        "        z = z.T  # important to transpose z before calling contour\n",
        "\n",
        "        # Plot z = 0\n",
        "        pyplot.contour(u, v, z, levels=[0], linewidths=2, colors='g')\n",
        "        pyplot.contourf(u, v, z, levels=[np.min(z), 0, np.max(z)], cmap='Greens', alpha=0.4)\n",
        "\n",
        "    pyplot.show()  # Display the plot"
      ],
      "cell_type": "code",
      "metadata": {
        "id": "OwFkytsszfNs"
      },
      "execution_count": 139,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 140,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "Q6oQNi0CJVNk",
        "outputId": "36c83ec2-1a3e-4667-d829-122244720f9a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Graficar limites\n",
        "plotDecisionBoundary(plotData, theta, X, y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nj6vynAtJVNk"
      },
      "source": [
        "<a id=\"section4\"></a>\n",
        "#### 1.2.4 Evaluación de la regresión logistica\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 141,
      "metadata": {
        "id": "0xz73RAdJVNk"
      },
      "outputs": [],
      "source": [
        "def predict(theta, X):\n",
        "    \"\"\"\n",
        "    Predecir si la etiqueta es 0 o 1 mediante regresión logística aprendida.\n",
        "    Calcula las predicciones para X usando un umbral en 0.5 (es decir, si sigmoide (theta.T * x)> = 0.5, predice 1)\n",
        "\n",
        "    Parametros\n",
        "    ----------\n",
        "    theta : array_like\n",
        "        Parametros para regresion logistica. Un vecto de la forma (n+1, ).\n",
        "\n",
        "    X : array_like\n",
        "        Datos utilizados para el calculo de las predicciones.\n",
        "        La fila es el numero de los puntos para calcular las predicciones,\n",
        "        y las columnas con el numero de caracteristicas.\n",
        "\n",
        "    Devuelve\n",
        "    -------\n",
        "    p : array_like\n",
        "        Predicciones y 0 o 1 para cada fila en X.\n",
        "    \"\"\"\n",
        "    m = X.shape[0] # Numero de ejemplo de entrenamiento\n",
        "\n",
        "    p = np.zeros(m)\n",
        "\n",
        "    p = np.round(sigmoid(X.dot(theta.T)))\n",
        "    return p"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w5PnbHiWJVNk"
      },
      "source": [
        "Una vez entrenado el modelo se procede a realizar la prediccion y evaluación de los resultados de predecir cual es el valor que vota el modelo para todos los datos utilizados en el entrenamiento."
      ]
    },
    {
      "source": [
        "#  Predice la probabilidad de aceptacion de prestamo para una persona dependiendo de su edad, ganancia anual, puntuacion crediticia, deudas, cantidad de prestamo\n",
        "#prob = sigmoid(np.dot([1, 47, 77], theta))\n",
        "prob = sigmoid(np.dot(np.pad([1, 47, 77], (0, 3), 'constant', constant_values=0), theta)) #Updated code to align array size.\n",
        "print('Para una persona, se predice una probabilidad de aprobación del prestamo de: {:.3f}%'.format(prob))\n",
        "print('Valor esperado: 0.775 +/- 0.002\\n')\n",
        "\n",
        "# Compute accuracy on our training set\n",
        "p = predict(theta, X)\n",
        "print('Precisión de entrenamiento: {:.2f} %'.format(np.mean(p == y) * 100))\n",
        "print('Precisión esperada (aproximadamente): 89.00 %')"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z6O8unW8zxiL",
        "outputId": "a5cd885f-1c68-467e-8f01-0307ff099ee1"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Para una persona, se predice una probabilidad de aprobación del prestamo de: 1.000%\n",
            "Valor esperado: 0.775 +/- 0.002\n",
            "\n",
            "Precisión de entrenamiento: 100.00 %\n",
            "Precisión esperada (aproximadamente): 89.00 %\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
